#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

HWND hwnd;  
HWND hStatic;  

double evaluateExpression(const char* expression) {
    double result = 0.0;
    int num1, num2;
    char op;

    int parsed = sscanf(expression, "%d %c %d", &num1, &op, &num2);
 
    if (parsed == 3) {
               switch (op) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                if (num2 != 0) {
                    result = (double)num1 / num2;
                } else {
                    MessageBox(hwnd, "Error: Division by zero", "Error", MB_OK | MB_ICONERROR);
                }
                break;
            default:
                   MessageBox(hwnd, "Error: Unknown operator", "Error", MB_OK | MB_ICONERROR);
                break;
        }
    } else {
        MessageBox(hwnd, "Error: Invalid expression", "Error", MB_OK | MB_ICONERROR);
    }
    return result;
}

HWND CreateButton(const char* text, int x, int y, int width, int height, int id) {
    return CreateWindow("BUTTON", text, WS_VISIBLE | WS_CHILD, x, y, width, height, hwnd, (HMENU)id, NULL, NULL);
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
       
        case WM_CREATE: {
          
            hStatic = CreateWindow("STATIC", "", WS_VISIBLE | WS_CHILD, 10, 10, 300, 20, hwnd, (HMENU)100, NULL, NULL);

            CreateWindow("BUTTON", "1", WS_VISIBLE | WS_CHILD, 10, 50, 50, 50, hwnd, (HMENU)1, NULL, NULL);
            CreateWindow("BUTTON", "2", WS_VISIBLE | WS_CHILD, 70, 50, 50, 50, hwnd, (HMENU)2, NULL, NULL);
            CreateWindow("BUTTON", "3", WS_VISIBLE | WS_CHILD, 130, 50, 50, 50, hwnd, (HMENU)3, NULL, NULL);
            CreateWindow("BUTTON", "+", WS_VISIBLE | WS_CHILD, 190, 50, 50, 50, hwnd, (HMENU)4, NULL, NULL);
            CreateWindow("BUTTON", "4", WS_VISIBLE | WS_CHILD, 10, 110, 50, 50, hwnd, (HMENU)5, NULL, NULL);
            CreateWindow("BUTTON", "5", WS_VISIBLE | WS_CHILD, 70, 110, 50, 50, hwnd, (HMENU)6, NULL, NULL);
            CreateWindow("BUTTON", "6", WS_VISIBLE | WS_CHILD, 130, 110, 50, 50, hwnd, (HMENU)7, NULL, NULL);
            CreateWindow("BUTTON", "-", WS_VISIBLE | WS_CHILD, 190, 110, 50, 50, hwnd, (HMENU)8, NULL, NULL);
            CreateWindow("BUTTON", "7", WS_VISIBLE | WS_CHILD, 10, 170, 50, 50, hwnd, (HMENU)9, NULL, NULL);
            CreateWindow("BUTTON", "8", WS_VISIBLE | WS_CHILD, 70, 170, 50, 50, hwnd, (HMENU)10, NULL, NULL);
            CreateWindow("BUTTON", "9", WS_VISIBLE | WS_CHILD, 130, 170, 50, 50, hwnd, (HMENU)11, NULL, NULL);
            CreateWindow("BUTTON", "*", WS_VISIBLE | WS_CHILD, 190, 170, 50, 50, hwnd, (HMENU)12, NULL, NULL);
            CreateWindow("BUTTON", "0", WS_VISIBLE | WS_CHILD, 10, 230, 50, 50, hwnd, (HMENU)13, NULL, NULL);
            CreateWindow("BUTTON", "=", WS_VISIBLE | WS_CHILD, 70, 230, 50, 50, hwnd, (HMENU)14, NULL, NULL);
            CreateWindow("BUTTON", "C", WS_VISIBLE | WS_CHILD, 130, 230, 50, 50, hwnd, (HMENU)15, NULL, NULL);
            CreateWindow("BUTTON", "/", WS_VISIBLE | WS_CHILD, 190, 230, 50, 50, hwnd, (HMENU)16, NULL, NULL);
            CreateWindow("BUTTON", "CLEAR", WS_VISIBLE | WS_CHILD, 250, 230, 70, 50, hwnd, (HMENU)17, NULL, NULL);

            SetWindowPos(hwnd, NULL, 0, 0, 400, 330, SWP_NOMOVE | SWP_NOZORDER);    
            break;
        }
    

case WM_COMMAND: {
    if (HIWORD(wParam) == BN_CLICKED) {
        
        int buttonId = LOWORD(wParam);
        char buttonText[10];
        GetWindowText(GetDlgItem(hwnd, buttonId), buttonText, sizeof(buttonText));
        char currentText[100];
        GetWindowText(GetDlgItem(hwnd, 100), currentText, sizeof(currentText));

        if (buttonId >= 1 && buttonId <= 13) {
            strcat(currentText, buttonText);
        } else if (buttonId == 15) {
            int len = strlen(currentText);
            if (len > 0) {
                currentText[len - 1] = '\0';
            }
        } else if (buttonId == 16) {
         
            strcat(currentText, buttonText);
        } else if (buttonId == 14) {
            double result = evaluateExpression(currentText);
            char resultText[50];
            snprintf(resultText, sizeof(resultText), "Result: %.2f", result);
            MessageBox(hwnd, resultText, "Calculation Result", MB_OK);
            currentText[0] = '\0';
        } else if (buttonId == 17) {
            currentText[0] = '\0';
        }
        SetWindowText(GetDlgItem(hwnd, 100), currentText);
    }
    break;
}
        case WM_DESTROY: {
            PostQuitMessage(0);   
            break;
        }
        default:
            return DefWindowProc(hwnd, msg, wParam, lParam);
    }  
    return 0;
}
void CreateCalculatorWindow() { 
    WNDCLASS wc = {0};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = GetModuleHandle(NULL);
    wc.lpszClassName = "CalculatorWindowClass";
    RegisterClass(&wc);
    hwnd = CreateWindow("CalculatorWindowClass", "Calculator", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 400, 300, NULL, NULL, GetModuleHandle(NULL), NULL);
    ShowWindow(hwnd, SW_SHOWDEFAULT);
    MSG msg;

    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
}
int main() {
    CreateCalculatorWindow();   
    return 0;
}
